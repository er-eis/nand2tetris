// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//address[14] acts as useRAM16K, address[14] = 0 == true, 1 == false
	Not(in=address[14], out=useRAM16K);
	
	//if address[14] == 1: address[12] acts as useRAM4K, 0 == true useFirstRAM4K, 1 == useSecondRAM4K
	Not(in=address[12], out=firstRAM4KLoadInitial);
	Not(in=address[13], out=notUseRegister);
	And(a=address[14], b=firstRAM4KLoadInitial, out=useFirstRAM4KInitial);
	And(a=notUseRegister, b=useFirstRAM4KInitial, out=useFirstRAM4K);
	And(a=address[14], b=address[12], out=useSecondRAM4K);
	
	//address[13..14] acts as useRegister, where both bits are 1 == true
	//this is address 110000000000000, the last accessible memory address
	And(a=address[13], b=address[14], out=useRegister);
	
	
	// sel mapping
	// 00 = useRAM16K
	// 01 = useFirstRAM4K
	// 10 = useSecondRAM4K
	// 11 = useRegister
	//useSecondRAM4K, expected sel bit result: if useSecondRAM4K == 1 => 10
	Xor(a=useSecondRAM4K, b=true, out=selBit1SecondRAM4K);
	
	//useFirstRAM4K, expected sel bit result: if useFirstRAM4K == 1 => 01
	Xor(a=useFirstRAM4K, b=true, out=selBit2FirstRAM4K);
	Or(a=useFirstRAM4K, b=selBit1SecondRAM4K, out=selBit1FirstRAM4K);
	
	//useRAM16K, expected sel bit result if useRAM16K == 1 => 00
	Not(in=useRAM16K, out=notUseRAM16K);
	And(a=notUseRAM16K, b=selBit1FirstRAM4K, out=selBit1);
	And(a=notUseRAM16K, b=selBit2FirstRAM4K, out=selBit2);
	
	
    DMux4Way(in=load, sel[0]=selBit1, sel[1]=selBit2, a=RAM1Load, b=RAM2Load, c=RAM3Load, d=registerLoad);
	RAM16K(in=in, load=RAM1Load, address=address[0..13], out=firstRAM);
	Or(a=RAM2Load, b=RAM3Load, out=screenLoad);
	Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut1, out=screenOut2);
	Keyboard(out=keyboardOut);
	Mux4Way16(sel[0]=selBit1, sel[1]=selBit2, a=firstRAM, b=screenOut1, c=screenOut2, d=keyboardOut, out=out);
}